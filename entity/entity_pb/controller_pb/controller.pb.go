// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: controller.proto

package controller_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControllerCommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Inner   string `protobuf:"bytes,3,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ControllerCommonResponse) Reset() {
	*x = ControllerCommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerCommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerCommonResponse) ProtoMessage() {}

func (x *ControllerCommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerCommonResponse.ProtoReflect.Descriptor instead.
func (*ControllerCommonResponse) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{0}
}

func (x *ControllerCommonResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ControllerCommonResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ControllerCommonResponse) GetInner() string {
	if x != nil {
		return x.Inner
	}
	return ""
}

type Requester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterUserNo         string `protobuf:"bytes,1,opt,name=requester_user_no,json=requesterUserNo,proto3" json:"requester_user_no,omitempty"`
	RequesterOpenId         string `protobuf:"bytes,2,opt,name=requester_open_id,json=requesterOpenId,proto3" json:"requester_open_id,omitempty"`
	RequesterOpenType       int32  `protobuf:"varint,3,opt,name=requester_open_type,json=requesterOpenType,proto3" json:"requester_open_type,omitempty"`
	RequesterOpenNickname   string `protobuf:"bytes,4,opt,name=requester_open_nickname,json=requesterOpenNickname,proto3" json:"requester_open_nickname,omitempty"`
	RequesterOpenUserName   string `protobuf:"bytes,5,opt,name=requester_open_user_name,json=requesterOpenUserName,proto3" json:"requester_open_user_name,omitempty"`
	RequesterChannelId      string `protobuf:"bytes,6,opt,name=requester_channel_id,json=requesterChannelId,proto3" json:"requester_channel_id,omitempty"`
	RequesterDefaultAddress string `protobuf:"bytes,7,opt,name=requester_default_address,json=requesterDefaultAddress,proto3" json:"requester_default_address,omitempty"`
	RequesterAppId          string `protobuf:"bytes,8,opt,name=requester_app_id,json=requesterAppId,proto3" json:"requester_app_id,omitempty"`
}

func (x *Requester) Reset() {
	*x = Requester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Requester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requester) ProtoMessage() {}

func (x *Requester) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requester.ProtoReflect.Descriptor instead.
func (*Requester) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{1}
}

func (x *Requester) GetRequesterUserNo() string {
	if x != nil {
		return x.RequesterUserNo
	}
	return ""
}

func (x *Requester) GetRequesterOpenId() string {
	if x != nil {
		return x.RequesterOpenId
	}
	return ""
}

func (x *Requester) GetRequesterOpenType() int32 {
	if x != nil {
		return x.RequesterOpenType
	}
	return 0
}

func (x *Requester) GetRequesterOpenNickname() string {
	if x != nil {
		return x.RequesterOpenNickname
	}
	return ""
}

func (x *Requester) GetRequesterOpenUserName() string {
	if x != nil {
		return x.RequesterOpenUserName
	}
	return ""
}

func (x *Requester) GetRequesterChannelId() string {
	if x != nil {
		return x.RequesterChannelId
	}
	return ""
}

func (x *Requester) GetRequesterDefaultAddress() string {
	if x != nil {
		return x.RequesterDefaultAddress
	}
	return ""
}

func (x *Requester) GetRequesterAppId() string {
	if x != nil {
		return x.RequesterAppId
	}
	return ""
}

type LoginByTGReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Username  string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	PhotoUrl  string `protobuf:"bytes,5,opt,name=photo_url,json=photoUrl,proto3" json:"photo_url,omitempty"`
	AuthDate  int64  `protobuf:"varint,6,opt,name=auth_date,json=authDate,proto3" json:"auth_date,omitempty"`
	Hash      string `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	AppId     string `protobuf:"bytes,8,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *LoginByTGReq) Reset() {
	*x = LoginByTGReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginByTGReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginByTGReq) ProtoMessage() {}

func (x *LoginByTGReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginByTGReq.ProtoReflect.Descriptor instead.
func (*LoginByTGReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{2}
}

func (x *LoginByTGReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginByTGReq) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *LoginByTGReq) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *LoginByTGReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginByTGReq) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

func (x *LoginByTGReq) GetAuthDate() int64 {
	if x != nil {
		return x.AuthDate
	}
	return 0
}

func (x *LoginByTGReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LoginByTGReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type QueryContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType       uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId         uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	From            string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	ContractAddress string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Data            string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryContractReq) Reset() {
	*x = QueryContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractReq) ProtoMessage() {}

func (x *QueryContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractReq.ProtoReflect.Descriptor instead.
func (*QueryContractReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{3}
}

func (x *QueryContractReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *QueryContractReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *QueryContractReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *QueryContractReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *QueryContractReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type QueryContractDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecodedData string `protobuf:"bytes,1,opt,name=decoded_data,json=decodedData,proto3" json:"decoded_data,omitempty"`
	RawData     string `protobuf:"bytes,2,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *QueryContractDetail) Reset() {
	*x = QueryContractDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractDetail) ProtoMessage() {}

func (x *QueryContractDetail) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractDetail.ProtoReflect.Descriptor instead.
func (*QueryContractDetail) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{4}
}

func (x *QueryContractDetail) GetDecodedData() string {
	if x != nil {
		return x.DecodedData
	}
	return ""
}

func (x *QueryContractDetail) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

type QueryContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *QueryContractDetail      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryContractResp) Reset() {
	*x = QueryContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryContractResp) ProtoMessage() {}

func (x *QueryContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryContractResp.ProtoReflect.Descriptor instead.
func (*QueryContractResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{5}
}

func (x *QueryContractResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *QueryContractResp) GetData() *QueryContractDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type SendTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType    uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId      uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	From         string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To           string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Nonce        uint64 `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Value        string `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
	GasLimit     uint64 `protobuf:"varint,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasPrice     uint64 `protobuf:"varint,11,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	PinCode      string `protobuf:"bytes,12,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	Payload      string `protobuf:"bytes,13,opt,name=payload,proto3" json:"payload,omitempty"`
	IsWait       bool   `protobuf:"varint,18,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
	CheckBalance bool   `protobuf:"varint,19,opt,name=check_balance,json=checkBalance,proto3" json:"check_balance,omitempty"`
	TxId         string `protobuf:"bytes,20,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	AsyncSend    bool   `protobuf:"varint,21,opt,name=async_send,json=asyncSend,proto3" json:"async_send,omitempty"`
	NoSend       bool   `protobuf:"varint,22,opt,name=no_send,json=noSend,proto3" json:"no_send,omitempty"`
}

func (x *SendTransactionReq) Reset() {
	*x = SendTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransactionReq) ProtoMessage() {}

func (x *SendTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransactionReq.ProtoReflect.Descriptor instead.
func (*SendTransactionReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{6}
}

func (x *SendTransactionReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *SendTransactionReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SendTransactionReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendTransactionReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SendTransactionReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SendTransactionReq) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SendTransactionReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SendTransactionReq) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SendTransactionReq) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *SendTransactionReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *SendTransactionReq) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SendTransactionReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

func (x *SendTransactionReq) GetCheckBalance() bool {
	if x != nil {
		return x.CheckBalance
	}
	return false
}

func (x *SendTransactionReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SendTransactionReq) GetAsyncSend() bool {
	if x != nil {
		return x.AsyncSend
	}
	return false
}

func (x *SendTransactionReq) GetNoSend() bool {
	if x != nil {
		return x.NoSend
	}
	return false
}

type InitAccessTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OpenId   string `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OpenType uint32 `protobuf:"varint,3,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	AppId    string `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *InitAccessTokenReq) Reset() {
	*x = InitAccessTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitAccessTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitAccessTokenReq) ProtoMessage() {}

func (x *InitAccessTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitAccessTokenReq.ProtoReflect.Descriptor instead.
func (*InitAccessTokenReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{7}
}

func (x *InitAccessTokenReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InitAccessTokenReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *InitAccessTokenReq) GetOpenType() uint32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *InitAccessTokenReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *InitAccessTokenReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type InitAccessTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *InitAccessTokenData      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InitAccessTokenResp) Reset() {
	*x = InitAccessTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitAccessTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitAccessTokenResp) ProtoMessage() {}

func (x *InitAccessTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitAccessTokenResp.ProtoReflect.Descriptor instead.
func (*InitAccessTokenResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{8}
}

func (x *InitAccessTokenResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *InitAccessTokenResp) GetData() *InitAccessTokenData {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *LoginData                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{9}
}

func (x *LoginResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *LoginResp) GetData() *LoginData {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token        string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	OwnedAppList []string `protobuf:"bytes,3,rep,name=owned_app_list,json=ownedAppList,proto3" json:"owned_app_list,omitempty"`
	Address      string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *LoginData) Reset() {
	*x = LoginData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginData) ProtoMessage() {}

func (x *LoginData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginData.ProtoReflect.Descriptor instead.
func (*LoginData) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{10}
}

func (x *LoginData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginData) GetOwnedAppList() []string {
	if x != nil {
		return x.OwnedAppList
	}
	return nil
}

func (x *LoginData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type InitAccessTokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ExpireAt string `protobuf:"bytes,3,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *InitAccessTokenData) Reset() {
	*x = InitAccessTokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitAccessTokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitAccessTokenData) ProtoMessage() {}

func (x *InitAccessTokenData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitAccessTokenData.ProtoReflect.Descriptor instead.
func (*InitAccessTokenData) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{11}
}

func (x *InitAccessTokenData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InitAccessTokenData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *InitAccessTokenData) GetExpireAt() string {
	if x != nil {
		return x.ExpireAt
	}
	return ""
}

type CalGasData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasPrice          uint64 `protobuf:"varint,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit          uint64 `protobuf:"varint,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasHandleDecimals string `protobuf:"bytes,3,opt,name=gas_handle_decimals,json=gasHandleDecimals,proto3" json:"gas_handle_decimals,omitempty"`
	Gas               string `protobuf:"bytes,4,opt,name=gas,proto3" json:"gas,omitempty"`
}

func (x *CalGasData) Reset() {
	*x = CalGasData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalGasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalGasData) ProtoMessage() {}

func (x *CalGasData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalGasData.ProtoReflect.Descriptor instead.
func (*CalGasData) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{12}
}

func (x *CalGasData) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *CalGasData) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *CalGasData) GetGasHandleDecimals() string {
	if x != nil {
		return x.GasHandleDecimals
	}
	return ""
}

func (x *CalGasData) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

type CalGasReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType          uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId            uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	OperationType      uint32 `protobuf:"varint,3,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	ContractAddress    string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Value              string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	OriginTokenAddress string `protobuf:"bytes,6,opt,name=origin_token_address,json=originTokenAddress,proto3" json:"origin_token_address,omitempty"`
}

func (x *CalGasReq) Reset() {
	*x = CalGasReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalGasReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalGasReq) ProtoMessage() {}

func (x *CalGasReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalGasReq.ProtoReflect.Descriptor instead.
func (*CalGasReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{13}
}

func (x *CalGasReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *CalGasReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *CalGasReq) GetOperationType() uint32 {
	if x != nil {
		return x.OperationType
	}
	return 0
}

func (x *CalGasReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *CalGasReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CalGasReq) GetOriginTokenAddress() string {
	if x != nil {
		return x.OriginTokenAddress
	}
	return ""
}

type CalGasResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *CalGasData               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CalGasResp) Reset() {
	*x = CalGasResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalGasResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalGasResp) ProtoMessage() {}

func (x *CalGasResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalGasResp.ProtoReflect.Descriptor instead.
func (*CalGasResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{14}
}

func (x *CalGasResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *CalGasResp) GetData() *CalGasData {
	if x != nil {
		return x.Data
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  uint32 id = 1;
	UserNo   string `protobuf:"bytes,2,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	OpenId   string `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OpenType int32  `protobuf:"varint,4,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	//  bool is_open_init = 5;
	DefaultAccountAddr string `protobuf:"bytes,6,opt,name=default_account_addr,json=defaultAccountAddr,proto3" json:"default_account_addr,omitempty"`
	//  string pin_code = 7;
	OpenUsername string `protobuf:"bytes,8,opt,name=open_username,json=openUsername,proto3" json:"open_username,omitempty"`
	OpenNickname string `protobuf:"bytes,9,opt,name=open_nickname,json=openNickname,proto3" json:"open_nickname,omitempty"`
	AvatarUrl    string `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{15}
}

func (x *User) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *User) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *User) GetOpenType() int32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *User) GetDefaultAccountAddr() string {
	if x != nil {
		return x.DefaultAccountAddr
	}
	return ""
}

func (x *User) GetOpenUsername() string {
	if x != nil {
		return x.OpenUsername
	}
	return ""
}

func (x *User) GetOpenNickname() string {
	if x != nil {
		return x.OpenNickname
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type GetUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo   string `protobuf:"bytes,2,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	OpenId   string `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OpenType int32  `protobuf:"varint,4,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	Address  string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetUserReq) Reset() {
	*x = GetUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReq) ProtoMessage() {}

func (x *GetUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReq.ProtoReflect.Descriptor instead.
func (*GetUserReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserReq) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *GetUserReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *GetUserReq) GetOpenType() int32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *GetUserReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BatchGetUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenIds     []string `protobuf:"bytes,2,rep,name=open_ids,json=openIds,proto3" json:"open_ids,omitempty"`
	OpenType    int32    `protobuf:"varint,3,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	AddressList []string `protobuf:"bytes,4,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
	UserNoList  []string `protobuf:"bytes,5,rep,name=user_no_list,json=userNoList,proto3" json:"user_no_list,omitempty"`
}

func (x *BatchGetUserReq) Reset() {
	*x = BatchGetUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserReq) ProtoMessage() {}

func (x *BatchGetUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserReq.ProtoReflect.Descriptor instead.
func (*BatchGetUserReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{17}
}

func (x *BatchGetUserReq) GetOpenIds() []string {
	if x != nil {
		return x.OpenIds
	}
	return nil
}

func (x *BatchGetUserReq) GetOpenType() int32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *BatchGetUserReq) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *BatchGetUserReq) GetUserNoList() []string {
	if x != nil {
		return x.UserNoList
	}
	return nil
}

type BatchGetUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           []*User                   `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchGetUserResp) Reset() {
	*x = BatchGetUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserResp) ProtoMessage() {}

func (x *BatchGetUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserResp.ProtoReflect.Descriptor instead.
func (*BatchGetUserResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{18}
}

func (x *BatchGetUserResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *BatchGetUserResp) GetData() []*User {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo             string `protobuf:"bytes,2,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	OpenId             string `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OpenType           int32  `protobuf:"varint,4,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	IsOpenInit         bool   `protobuf:"varint,5,opt,name=is_open_init,json=isOpenInit,proto3" json:"is_open_init,omitempty"`
	DefaultAccountAddr string `protobuf:"bytes,6,opt,name=default_account_addr,json=defaultAccountAddr,proto3" json:"default_account_addr,omitempty"`
	CreateAccount      bool   `protobuf:"varint,7,opt,name=create_account,json=createAccount,proto3" json:"create_account,omitempty"`
	PinCode            string `protobuf:"bytes,8,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	ChannelId          string `protobuf:"bytes,9,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Username           string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Nickname           string `protobuf:"bytes,11,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AppId              string `protobuf:"bytes,12,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AvatarUrl          string `protobuf:"bytes,13,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *AddUserReq) Reset() {
	*x = AddUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserReq) ProtoMessage() {}

func (x *AddUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserReq.ProtoReflect.Descriptor instead.
func (*AddUserReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{19}
}

func (x *AddUserReq) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *AddUserReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *AddUserReq) GetOpenType() int32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *AddUserReq) GetIsOpenInit() bool {
	if x != nil {
		return x.IsOpenInit
	}
	return false
}

func (x *AddUserReq) GetDefaultAccountAddr() string {
	if x != nil {
		return x.DefaultAccountAddr
	}
	return ""
}

func (x *AddUserReq) GetCreateAccount() bool {
	if x != nil {
		return x.CreateAccount
	}
	return false
}

func (x *AddUserReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *AddUserReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *AddUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddUserReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *AddUserReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AddUserReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type UpdateUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo     string `protobuf:"bytes,2,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	OpenId     string `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OpenType   int32  `protobuf:"varint,4,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	IsOpenInit bool   `protobuf:"varint,5,opt,name=is_open_init,json=isOpenInit,proto3" json:"is_open_init,omitempty"`
	Username   string `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	Nickname   string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AvatarUrl  string `protobuf:"bytes,8,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *UpdateUserReq) Reset() {
	*x = UpdateUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserReq) ProtoMessage() {}

func (x *UpdateUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserReq.ProtoReflect.Descriptor instead.
func (*UpdateUserReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserReq) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *UpdateUserReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *UpdateUserReq) GetOpenType() int32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *UpdateUserReq) GetIsOpenInit() bool {
	if x != nil {
		return x.IsOpenInit
	}
	return false
}

func (x *UpdateUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUserReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdateUserReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type DeleteUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo   string `protobuf:"bytes,2,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	OpenId   string `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OpenType int32  `protobuf:"varint,4,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	PinCode  string `protobuf:"bytes,5,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
}

func (x *DeleteUserReq) Reset() {
	*x = DeleteUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserReq) ProtoMessage() {}

func (x *DeleteUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserReq.ProtoReflect.Descriptor instead.
func (*DeleteUserReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteUserReq) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *DeleteUserReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *DeleteUserReq) GetOpenType() int32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *DeleteUserReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

type GetUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *User                     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUserResp) Reset() {
	*x = GetUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResp) ProtoMessage() {}

func (x *GetUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResp.ProtoReflect.Descriptor instead.
func (*GetUserResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetUserResp) GetData() *User {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OpenId   string `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OpenType uint32 `protobuf:"varint,3,opt,name=open_type,json=openType,proto3" json:"open_type,omitempty"`
	AppId    string `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Token    string `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
	ExpireAt int64  `protobuf:"varint,11,opt,name=expireAt,proto3" json:"expireAt,omitempty"`
}

func (x *UserToken) Reset() {
	*x = UserToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToken) ProtoMessage() {}

func (x *UserToken) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToken.ProtoReflect.Descriptor instead.
func (*UserToken) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{23}
}

func (x *UserToken) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserToken) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *UserToken) GetOpenType() uint32 {
	if x != nil {
		return x.OpenType
	}
	return 0
}

func (x *UserToken) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UserToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserToken) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type Acc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo     string `protobuf:"bytes,2,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	Address    string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PinCode    string `protobuf:"bytes,4,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	PrivateKey string `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Acc) Reset() {
	*x = Acc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acc) ProtoMessage() {}

func (x *Acc) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acc.ProtoReflect.Descriptor instead.
func (*Acc) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{24}
}

func (x *Acc) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *Acc) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Acc) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *Acc) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type AddAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo      string `protobuf:"bytes,2,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	AccountType int32  `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	AccountName string `protobuf:"bytes,5,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	PinCode     string `protobuf:"bytes,6,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	ChannelId   string `protobuf:"bytes,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *AddAccountReq) Reset() {
	*x = AddAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccountReq) ProtoMessage() {}

func (x *AddAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccountReq.ProtoReflect.Descriptor instead.
func (*AddAccountReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{25}
}

func (x *AddAccountReq) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *AddAccountReq) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *AddAccountReq) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AddAccountReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *AddAccountReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ImportAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo     string `protobuf:"bytes,1,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PinCode    string `protobuf:"bytes,3,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
}

func (x *ImportAccountReq) Reset() {
	*x = ImportAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAccountReq) ProtoMessage() {}

func (x *ImportAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAccountReq.ProtoReflect.Descriptor instead.
func (*ImportAccountReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{26}
}

func (x *ImportAccountReq) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *ImportAccountReq) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *ImportAccountReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

type GetAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNo  string `protobuf:"bytes,1,opt,name=user_no,json=userNo,proto3" json:"user_no,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PinCode string `protobuf:"bytes,3,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
}

func (x *GetAccountReq) Reset() {
	*x = GetAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountReq) ProtoMessage() {}

func (x *GetAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountReq.ProtoReflect.Descriptor instead.
func (*GetAccountReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{27}
}

func (x *GetAccountReq) GetUserNo() string {
	if x != nil {
		return x.UserNo
	}
	return ""
}

func (x *GetAccountReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAccountReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

type GetAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *Acc                      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAccountResp) Reset() {
	*x = GetAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountResp) ProtoMessage() {}

func (x *GetAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountResp.ProtoReflect.Descriptor instead.
func (*GetAccountResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{28}
}

func (x *GetAccountResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetAccountResp) GetData() *Acc {
	if x != nil {
		return x.Data
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChainType         uint32 `protobuf:"varint,2,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId           uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	AccountAddr       string `protobuf:"bytes,4,opt,name=account_addr,json=accountAddr,proto3" json:"account_addr,omitempty"`
	TokenType         uint32 `protobuf:"varint,5,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Name              string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Symbol            string `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals          uint32 `protobuf:"varint,8,opt,name=decimals,proto3" json:"decimals,omitempty"`
	ContrAddr         string `protobuf:"bytes,9,opt,name=contr_addr,json=contrAddr,proto3" json:"contr_addr,omitempty"`
	BalanceCutDecimal string `protobuf:"bytes,10,opt,name=balance_cut_decimal,json=balanceCutDecimal,proto3" json:"balance_cut_decimal,omitempty"`
	Balance           string `protobuf:"bytes,11,opt,name=balance,proto3" json:"balance,omitempty"`
	TotalPrice        string `protobuf:"bytes,12,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{29}
}

func (x *Asset) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Asset) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *Asset) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Asset) GetAccountAddr() string {
	if x != nil {
		return x.AccountAddr
	}
	return ""
}

func (x *Asset) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Asset) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Asset) GetContrAddr() string {
	if x != nil {
		return x.ContrAddr
	}
	return ""
}

func (x *Asset) GetBalanceCutDecimal() string {
	if x != nil {
		return x.BalanceCutDecimal
	}
	return ""
}

func (x *Asset) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Asset) GetTotalPrice() string {
	if x != nil {
		return x.TotalPrice
	}
	return ""
}

type GetAssetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *Asset                    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAssetResp) Reset() {
	*x = GetAssetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetResp) ProtoMessage() {}

func (x *GetAssetResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetResp.ProtoReflect.Descriptor instead.
func (*GetAssetResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{30}
}

func (x *GetAssetResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetAssetResp) GetData() *Asset {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType    uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId      uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	TokenType    uint32 `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	CheckBalance bool   `protobuf:"varint,5,opt,name=check_balance,json=checkBalance,proto3" json:"check_balance,omitempty"`
}

func (x *AssetListReq) Reset() {
	*x = AssetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetListReq) ProtoMessage() {}

func (x *AssetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetListReq.ProtoReflect.Descriptor instead.
func (*AssetListReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{31}
}

func (x *AssetListReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *AssetListReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AssetListReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AssetListReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *AssetListReq) GetCheckBalance() bool {
	if x != nil {
		return x.CheckBalance
	}
	return false
}

type AddAssetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType       uint32   `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId         uint64   `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Address         string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	ContractAddress string   `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenType       uint32   `protobuf:"varint,5,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	AddressList     []string `protobuf:"bytes,6,rep,name=address_list,json=addressList,proto3" json:"address_list,omitempty"`
}

func (x *AddAssetReq) Reset() {
	*x = AddAssetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetReq) ProtoMessage() {}

func (x *AddAssetReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetReq.ProtoReflect.Descriptor instead.
func (*AddAssetReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{32}
}

func (x *AddAssetReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *AddAssetReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AddAssetReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddAssetReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *AddAssetReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *AddAssetReq) GetAddressList() []string {
	if x != nil {
		return x.AddressList
	}
	return nil
}

type GetTokenInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId         uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ContractAddress string `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenType       uint32 `protobuf:"varint,5,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
}

func (x *GetTokenInfoRequest) Reset() {
	*x = GetTokenInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenInfoRequest) ProtoMessage() {}

func (x *GetTokenInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTokenInfoRequest) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{33}
}

func (x *GetTokenInfoRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GetTokenInfoRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetTokenInfoRequest) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

type TokenInfoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals uint32 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	ChainId  uint64 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Address  string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *TokenInfoData) Reset() {
	*x = TokenInfoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfoData) ProtoMessage() {}

func (x *TokenInfoData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfoData.ProtoReflect.Descriptor instead.
func (*TokenInfoData) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{34}
}

func (x *TokenInfoData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TokenInfoData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenInfoData) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenInfoData) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *TokenInfoData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetTokenInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *TokenInfoData            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTokenInfoResponse) Reset() {
	*x = GetTokenInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenInfoResponse) ProtoMessage() {}

func (x *GetTokenInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenInfoResponse.ProtoReflect.Descriptor instead.
func (*GetTokenInfoResponse) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{35}
}

func (x *GetTokenInfoResponse) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetTokenInfoResponse) GetData() *TokenInfoData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	List  []*Asset `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AssetList) Reset() {
	*x = AssetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetList) ProtoMessage() {}

func (x *AssetList) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetList.ProtoReflect.Descriptor instead.
func (*AssetList) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{36}
}

func (x *AssetList) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AssetList) GetList() []*Asset {
	if x != nil {
		return x.List
	}
	return nil
}

type AssetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *AssetList                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AssetListResp) Reset() {
	*x = AssetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetListResp) ProtoMessage() {}

func (x *AssetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetListResp.ProtoReflect.Descriptor instead.
func (*AssetListResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{37}
}

func (x *AssetListResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *AssetListResp) GetData() *AssetList {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAssetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType       uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId         uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Address         string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	TokenType       uint32 `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	ContractAddress string `protobuf:"bytes,5,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	ForceBalance    bool   `protobuf:"varint,6,opt,name=force_balance,json=forceBalance,proto3" json:"force_balance,omitempty"`
}

func (x *GetAssetReq) Reset() {
	*x = GetAssetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetReq) ProtoMessage() {}

func (x *GetAssetReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetReq.ProtoReflect.Descriptor instead.
func (*GetAssetReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{38}
}

func (x *GetAssetReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *GetAssetReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *GetAssetReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAssetReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *GetAssetReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *GetAssetReq) GetForceBalance() bool {
	if x != nil {
		return x.ForceBalance
	}
	return false
}

type GetBankBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId   uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *GetBankBalanceReq) Reset() {
	*x = GetBankBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankBalanceReq) ProtoMessage() {}

func (x *GetBankBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankBalanceReq.ProtoReflect.Descriptor instead.
func (*GetBankBalanceReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{39}
}

func (x *GetBankBalanceReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *GetBankBalanceReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type IssueTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType                uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId                  uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Address                  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PinCode                  string `protobuf:"bytes,4,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	FromId                   string `protobuf:"bytes,19,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Name                     string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Symbol                   string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	InitialSupplyUnHandleStr string `protobuf:"bytes,7,opt,name=initial_supply_un_handle_str,json=initialSupplyUnHandleStr,proto3" json:"initial_supply_un_handle_str,omitempty"`
	MintAble                 bool   `protobuf:"varint,8,opt,name=mint_able,json=mintAble,proto3" json:"mint_able,omitempty"`
	TokenType                uint32 `protobuf:"varint,9,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	IsWait                   bool   `protobuf:"varint,18,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
	TxId                     string `protobuf:"bytes,20,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *IssueTokenReq) Reset() {
	*x = IssueTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTokenReq) ProtoMessage() {}

func (x *IssueTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTokenReq.ProtoReflect.Descriptor instead.
func (*IssueTokenReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{40}
}

func (x *IssueTokenReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *IssueTokenReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *IssueTokenReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IssueTokenReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *IssueTokenReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *IssueTokenReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IssueTokenReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *IssueTokenReq) GetInitialSupplyUnHandleStr() string {
	if x != nil {
		return x.InitialSupplyUnHandleStr
	}
	return ""
}

func (x *IssueTokenReq) GetMintAble() bool {
	if x != nil {
		return x.MintAble
	}
	return false
}

func (x *IssueTokenReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *IssueTokenReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

func (x *IssueTokenReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type AirdropReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType       uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId         uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Address         string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PinCode         string `protobuf:"bytes,4,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	FromId          string `protobuf:"bytes,5,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ContractAddress string `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenType       uint32 `protobuf:"varint,7,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Amount          string `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	ChannelId       string `protobuf:"bytes,9,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *AirdropReq) Reset() {
	*x = AirdropReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirdropReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirdropReq) ProtoMessage() {}

func (x *AirdropReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirdropReq.ProtoReflect.Descriptor instead.
func (*AirdropReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{41}
}

func (x *AirdropReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *AirdropReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AirdropReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AirdropReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *AirdropReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *AirdropReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *AirdropReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *AirdropReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AirdropReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type AirdropData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash       string   `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ReceiverInfo string   `protobuf:"bytes,2,opt,name=receiver_info,json=receiverInfo,proto3" json:"receiver_info,omitempty"`
	ReceiverList []string `protobuf:"bytes,3,rep,name=receiver_list,json=receiverList,proto3" json:"receiver_list,omitempty"`
	OpenIdList   []string `protobuf:"bytes,5,rep,name=open_id_list,json=openIdList,proto3" json:"open_id_list,omitempty"`
	Amount       string   `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AirdropData) Reset() {
	*x = AirdropData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirdropData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirdropData) ProtoMessage() {}

func (x *AirdropData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirdropData.ProtoReflect.Descriptor instead.
func (*AirdropData) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{42}
}

func (x *AirdropData) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *AirdropData) GetReceiverInfo() string {
	if x != nil {
		return x.ReceiverInfo
	}
	return ""
}

func (x *AirdropData) GetReceiverList() []string {
	if x != nil {
		return x.ReceiverList
	}
	return nil
}

func (x *AirdropData) GetOpenIdList() []string {
	if x != nil {
		return x.OpenIdList
	}
	return nil
}

func (x *AirdropData) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetAirdropResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *AirdropData              `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAirdropResp) Reset() {
	*x = GetAirdropResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAirdropResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAirdropResp) ProtoMessage() {}

func (x *GetAirdropResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAirdropResp.ProtoReflect.Descriptor instead.
func (*GetAirdropResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{43}
}

func (x *GetAirdropResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetAirdropResp) GetData() *AirdropData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTxReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	IsWait bool   `protobuf:"varint,2,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
	TxId   string `protobuf:"bytes,10,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetTxReq) Reset() {
	*x = GetTxReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxReq) ProtoMessage() {}

func (x *GetTxReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxReq.ProtoReflect.Descriptor instead.
func (*GetTxReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{44}
}

func (x *GetTxReq) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *GetTxReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

func (x *GetTxReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type TransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType          uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId            uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	FromId             string `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	From               string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To                 string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	ContractAddress    string `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenType          uint32 `protobuf:"varint,7,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Nonce              uint64 `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Value              string `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
	ValueWithDecimals  string `protobuf:"bytes,21,opt,name=value_with_decimals,json=valueWithDecimals,proto3" json:"value_with_decimals,omitempty"`
	GasLimit           uint64 `protobuf:"varint,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasPrice           uint64 `protobuf:"varint,11,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	PinCode            string `protobuf:"bytes,12,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	CheckBalance       bool   `protobuf:"varint,13,opt,name=check_balance,json=checkBalance,proto3" json:"check_balance,omitempty"`
	MaxAmount          bool   `protobuf:"varint,14,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	IsWait             bool   `protobuf:"varint,18,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
	TxId               string `protobuf:"bytes,20,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	IgnoreBalanceCheck bool   `protobuf:"varint,22,opt,name=ignore_balance_check,json=ignoreBalanceCheck,proto3" json:"ignore_balance_check,omitempty"`
}

func (x *TransferReq) Reset() {
	*x = TransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReq) ProtoMessage() {}

func (x *TransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReq.ProtoReflect.Descriptor instead.
func (*TransferReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{45}
}

func (x *TransferReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *TransferReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *TransferReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *TransferReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransferReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransferReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TransferReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *TransferReq) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransferReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TransferReq) GetValueWithDecimals() string {
	if x != nil {
		return x.ValueWithDecimals
	}
	return ""
}

func (x *TransferReq) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *TransferReq) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *TransferReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *TransferReq) GetCheckBalance() bool {
	if x != nil {
		return x.CheckBalance
	}
	return false
}

func (x *TransferReq) GetMaxAmount() bool {
	if x != nil {
		return x.MaxAmount
	}
	return false
}

func (x *TransferReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

func (x *TransferReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TransferReq) GetIgnoreBalanceCheck() bool {
	if x != nil {
		return x.IgnoreBalanceCheck
	}
	return false
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash          string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Status          uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
	TxId            string `protobuf:"bytes,20,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ErrMsg          string `protobuf:"bytes,21,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	GasLimit        uint64 `protobuf:"varint,22,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasPrice        uint64 `protobuf:"varint,23,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{46}
}

func (x *Tx) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Tx) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Tx) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Tx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Tx) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *Tx) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Tx) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

type GetTxResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *Tx                       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTxResp) Reset() {
	*x = GetTxResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxResp) ProtoMessage() {}

func (x *GetTxResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxResp.ProtoReflect.Descriptor instead.
func (*GetTxResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{47}
}

func (x *GetTxResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetTxResp) GetData() *Tx {
	if x != nil {
		return x.Data
	}
	return nil
}

type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32 `protobuf:"varint,40,opt,name=id,proto3" json:"id,omitempty"`
	ChainType      uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId        uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EnvelopeNo     string `protobuf:"bytes,3,opt,name=envelope_no,json=envelopeNo,proto3" json:"envelope_no,omitempty"`
	EnvelopeType   uint32 `protobuf:"varint,4,opt,name=envelope_type,json=envelopeType,proto3" json:"envelope_type,omitempty"`
	Status         uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatorNo      string `protobuf:"bytes,6,opt,name=creator_no,json=creatorNo,proto3" json:"creator_no,omitempty"`
	CreatorName    string `protobuf:"bytes,7,opt,name=creator_name,json=creatorName,proto3" json:"creator_name,omitempty"`
	CreatorAddress string `protobuf:"bytes,8,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	AccountNo      string `protobuf:"bytes,9,opt,name=account_no,json=accountNo,proto3" json:"account_no,omitempty"`
	AccountAddress string `protobuf:"bytes,10,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	PinCode        string `protobuf:"bytes,11,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	Salt           string `protobuf:"bytes,12,opt,name=salt,proto3" json:"salt,omitempty"`
	TxHash         string `protobuf:"bytes,13,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Platform       int32  `protobuf:"varint,14,opt,name=platform,proto3" json:"platform,omitempty"`
	ChannelId      string `protobuf:"bytes,15,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Blessing       string `protobuf:"bytes,16,opt,name=blessing,proto3" json:"blessing,omitempty"`
	Amount         uint64 `protobuf:"varint,17,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountOne      uint64 `protobuf:"varint,18,opt,name=amount_one,json=amountOne,proto3" json:"amount_one,omitempty"`
	Quantity       uint32 `protobuf:"varint,19,opt,name=quantity,proto3" json:"quantity,omitempty"`
	GasPrice       uint64 `protobuf:"varint,20,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	RemainAmount   uint64 `protobuf:"varint,21,opt,name=remain_amount,json=remainAmount,proto3" json:"remain_amount,omitempty"`
	RemainQuantity uint32 `protobuf:"varint,22,opt,name=remain_quantity,json=remainQuantity,proto3" json:"remain_quantity,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{48}
}

func (x *Envelope) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Envelope) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *Envelope) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Envelope) GetEnvelopeNo() string {
	if x != nil {
		return x.EnvelopeNo
	}
	return ""
}

func (x *Envelope) GetEnvelopeType() uint32 {
	if x != nil {
		return x.EnvelopeType
	}
	return 0
}

func (x *Envelope) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Envelope) GetCreatorNo() string {
	if x != nil {
		return x.CreatorNo
	}
	return ""
}

func (x *Envelope) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *Envelope) GetCreatorAddress() string {
	if x != nil {
		return x.CreatorAddress
	}
	return ""
}

func (x *Envelope) GetAccountNo() string {
	if x != nil {
		return x.AccountNo
	}
	return ""
}

func (x *Envelope) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *Envelope) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *Envelope) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *Envelope) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Envelope) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *Envelope) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Envelope) GetBlessing() string {
	if x != nil {
		return x.Blessing
	}
	return ""
}

func (x *Envelope) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Envelope) GetAmountOne() uint64 {
	if x != nil {
		return x.AmountOne
	}
	return 0
}

func (x *Envelope) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Envelope) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *Envelope) GetRemainAmount() uint64 {
	if x != nil {
		return x.RemainAmount
	}
	return 0
}

func (x *Envelope) GetRemainQuantity() uint32 {
	if x != nil {
		return x.RemainQuantity
	}
	return 0
}

type GetEnvelopeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *Envelope                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetEnvelopeResp) Reset() {
	*x = GetEnvelopeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnvelopeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvelopeResp) ProtoMessage() {}

func (x *GetEnvelopeResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvelopeResp.ProtoReflect.Descriptor instead.
func (*GetEnvelopeResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{49}
}

func (x *GetEnvelopeResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetEnvelopeResp) GetData() *Envelope {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddEnvelopeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType       uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId         uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TokenType       uint32 `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Address         string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	ContractAddress string `protobuf:"bytes,5,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Amount          string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Quantity        uint64 `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	EnvelopeType    uint32 `protobuf:"varint,8,opt,name=envelope_type,json=envelopeType,proto3" json:"envelope_type,omitempty"`
	Blessing        string `protobuf:"bytes,9,opt,name=blessing,proto3" json:"blessing,omitempty"`
	PinCode         string `protobuf:"bytes,10,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	IsWait          bool   `protobuf:"varint,18,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
	FromId          string `protobuf:"bytes,19,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChannelId       string `protobuf:"bytes,20,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *AddEnvelopeReq) Reset() {
	*x = AddEnvelopeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEnvelopeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEnvelopeReq) ProtoMessage() {}

func (x *AddEnvelopeReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEnvelopeReq.ProtoReflect.Descriptor instead.
func (*AddEnvelopeReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{50}
}

func (x *AddEnvelopeReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *AddEnvelopeReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AddEnvelopeReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *AddEnvelopeReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddEnvelopeReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *AddEnvelopeReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AddEnvelopeReq) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *AddEnvelopeReq) GetEnvelopeType() uint32 {
	if x != nil {
		return x.EnvelopeType
	}
	return 0
}

func (x *AddEnvelopeReq) GetBlessing() string {
	if x != nil {
		return x.Blessing
	}
	return ""
}

func (x *AddEnvelopeReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *AddEnvelopeReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

func (x *AddEnvelopeReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *AddEnvelopeReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type OpenEnvelopeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	EnvelopeNo string `protobuf:"bytes,2,opt,name=envelope_no,json=envelopeNo,proto3" json:"envelope_no,omitempty"`
	EnvelopeId uint32 `protobuf:"varint,3,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"`
	IsWait     bool   `protobuf:"varint,18,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
	ChannelId  string `protobuf:"bytes,20,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *OpenEnvelopeReq) Reset() {
	*x = OpenEnvelopeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenEnvelopeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenEnvelopeReq) ProtoMessage() {}

func (x *OpenEnvelopeReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenEnvelopeReq.ProtoReflect.Descriptor instead.
func (*OpenEnvelopeReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{51}
}

func (x *OpenEnvelopeReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OpenEnvelopeReq) GetEnvelopeNo() string {
	if x != nil {
		return x.EnvelopeNo
	}
	return ""
}

func (x *OpenEnvelopeReq) GetEnvelopeId() uint32 {
	if x != nil {
		return x.EnvelopeId
	}
	return 0
}

func (x *OpenEnvelopeReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

func (x *OpenEnvelopeReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type GetEnvelopeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvelopeNo  string `protobuf:"bytes,2,opt,name=envelope_no,json=envelopeNo,proto3" json:"envelope_no,omitempty"`
	EnvelopeId  uint32 `protobuf:"varint,3,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"`
	WaitSuccess bool   `protobuf:"varint,4,opt,name=wait_success,json=waitSuccess,proto3" json:"wait_success,omitempty"`
}

func (x *GetEnvelopeReq) Reset() {
	*x = GetEnvelopeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnvelopeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvelopeReq) ProtoMessage() {}

func (x *GetEnvelopeReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvelopeReq.ProtoReflect.Descriptor instead.
func (*GetEnvelopeReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{52}
}

func (x *GetEnvelopeReq) GetEnvelopeNo() string {
	if x != nil {
		return x.EnvelopeNo
	}
	return ""
}

func (x *GetEnvelopeReq) GetEnvelopeId() uint32 {
	if x != nil {
		return x.EnvelopeId
	}
	return 0
}

func (x *GetEnvelopeReq) GetWaitSuccess() bool {
	if x != nil {
		return x.WaitSuccess
	}
	return false
}

type EnvelopeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType   uint32 `protobuf:"varint,7,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvelopeId  uint32 `protobuf:"varint,2,opt,name=envelope_id,json=envelopeId,proto3" json:"envelope_id,omitempty"`
	AssetSymbol string `protobuf:"bytes,3,opt,name=asset_symbol,json=assetSymbol,proto3" json:"asset_symbol,omitempty"`
	Status      uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Amount      string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	TxHash      string `protobuf:"bytes,6,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxId        string `protobuf:"bytes,8,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *EnvelopeRecord) Reset() {
	*x = EnvelopeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeRecord) ProtoMessage() {}

func (x *EnvelopeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeRecord.ProtoReflect.Descriptor instead.
func (*EnvelopeRecord) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{53}
}

func (x *EnvelopeRecord) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *EnvelopeRecord) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnvelopeRecord) GetEnvelopeId() uint32 {
	if x != nil {
		return x.EnvelopeId
	}
	return 0
}

func (x *EnvelopeRecord) GetAssetSymbol() string {
	if x != nil {
		return x.AssetSymbol
	}
	return ""
}

func (x *EnvelopeRecord) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EnvelopeRecord) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EnvelopeRecord) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *EnvelopeRecord) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type GetEnvelopeRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *EnvelopeRecord           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetEnvelopeRecordResp) Reset() {
	*x = GetEnvelopeRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnvelopeRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnvelopeRecordResp) ProtoMessage() {}

func (x *GetEnvelopeRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnvelopeRecordResp.ProtoReflect.Descriptor instead.
func (*GetEnvelopeRecordResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{54}
}

func (x *GetEnvelopeRecordResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetEnvelopeRecordResp) GetData() *EnvelopeRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChangeAccountPinCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	OldPinCode string `protobuf:"bytes,4,opt,name=old_pin_code,json=oldPinCode,proto3" json:"old_pin_code,omitempty"`
	NewPinCode string `protobuf:"bytes,5,opt,name=new_pin_code,json=newPinCode,proto3" json:"new_pin_code,omitempty"`
}

func (x *ChangeAccountPinCodeReq) Reset() {
	*x = ChangeAccountPinCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAccountPinCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAccountPinCodeReq) ProtoMessage() {}

func (x *ChangeAccountPinCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAccountPinCodeReq.ProtoReflect.Descriptor instead.
func (*ChangeAccountPinCodeReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{55}
}

func (x *ChangeAccountPinCodeReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ChangeAccountPinCodeReq) GetOldPinCode() string {
	if x != nil {
		return x.OldPinCode
	}
	return ""
}

func (x *ChangeAccountPinCodeReq) GetNewPinCode() string {
	if x != nil {
		return x.NewPinCode
	}
	return ""
}

type BridgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromChainType uint32 `protobuf:"varint,1,opt,name=from_chain_type,json=fromChainType,proto3" json:"from_chain_type,omitempty"`
	FromChainId   uint64 `protobuf:"varint,2,opt,name=from_chain_id,json=fromChainId,proto3" json:"from_chain_id,omitempty"`
	ToChainType   uint32 `protobuf:"varint,3,opt,name=to_chain_type,json=toChainType,proto3" json:"to_chain_type,omitempty"`
	ToChainId     uint64 `protobuf:"varint,4,opt,name=to_chain_id,json=toChainId,proto3" json:"to_chain_id,omitempty"`
	BridgeAmount  string `protobuf:"bytes,5,opt,name=bridge_amount,json=bridgeAmount,proto3" json:"bridge_amount,omitempty"`
	TransferType  uint32 `protobuf:"varint,6,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"`
	FromId        string `protobuf:"bytes,20,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	From          string `protobuf:"bytes,21,opt,name=from,proto3" json:"from,omitempty"`
	PinCode       string `protobuf:"bytes,22,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	MaxAmount     bool   `protobuf:"varint,14,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
}

func (x *BridgeReq) Reset() {
	*x = BridgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeReq) ProtoMessage() {}

func (x *BridgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeReq.ProtoReflect.Descriptor instead.
func (*BridgeReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{56}
}

func (x *BridgeReq) GetFromChainType() uint32 {
	if x != nil {
		return x.FromChainType
	}
	return 0
}

func (x *BridgeReq) GetFromChainId() uint64 {
	if x != nil {
		return x.FromChainId
	}
	return 0
}

func (x *BridgeReq) GetToChainType() uint32 {
	if x != nil {
		return x.ToChainType
	}
	return 0
}

func (x *BridgeReq) GetToChainId() uint64 {
	if x != nil {
		return x.ToChainId
	}
	return 0
}

func (x *BridgeReq) GetBridgeAmount() string {
	if x != nil {
		return x.BridgeAmount
	}
	return ""
}

func (x *BridgeReq) GetTransferType() uint32 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *BridgeReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *BridgeReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *BridgeReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *BridgeReq) GetMaxAmount() bool {
	if x != nil {
		return x.MaxAmount
	}
	return false
}

type GetBridgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNo string `protobuf:"bytes,1,opt,name=record_no,json=recordNo,proto3" json:"record_no,omitempty"`
}

func (x *GetBridgeReq) Reset() {
	*x = GetBridgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeReq) ProtoMessage() {}

func (x *GetBridgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeReq.ProtoReflect.Descriptor instead.
func (*GetBridgeReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{57}
}

func (x *GetBridgeReq) GetRecordNo() string {
	if x != nil {
		return x.RecordNo
	}
	return ""
}

type BridgeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNo   string `protobuf:"bytes,1,opt,name=record_no,json=recordNo,proto3" json:"record_no,omitempty"`
	Status     uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	FromTxHash string `protobuf:"bytes,3,opt,name=from_tx_hash,json=fromTxHash,proto3" json:"from_tx_hash,omitempty"`
	ToTxHash   string `protobuf:"bytes,7,opt,name=to_tx_hash,json=toTxHash,proto3" json:"to_tx_hash,omitempty"`
	ErrMsg     string `protobuf:"bytes,20,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (x *BridgeData) Reset() {
	*x = BridgeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeData) ProtoMessage() {}

func (x *BridgeData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeData.ProtoReflect.Descriptor instead.
func (*BridgeData) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{58}
}

func (x *BridgeData) GetRecordNo() string {
	if x != nil {
		return x.RecordNo
	}
	return ""
}

func (x *BridgeData) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BridgeData) GetFromTxHash() string {
	if x != nil {
		return x.FromTxHash
	}
	return ""
}

func (x *BridgeData) GetToTxHash() string {
	if x != nil {
		return x.ToTxHash
	}
	return ""
}

func (x *BridgeData) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type GetBridgeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *BridgeData               `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBridgeResp) Reset() {
	*x = GetBridgeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeResp) ProtoMessage() {}

func (x *GetBridgeResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeResp.ProtoReflect.Descriptor instead.
func (*GetBridgeResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{59}
}

func (x *GetBridgeResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetBridgeResp) GetData() *BridgeData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType          uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId            uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	FromId             string `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	From               string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To                 string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	ContractAddress    string `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenType          uint32 `protobuf:"varint,7,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	OriginTokenAddress string `protobuf:"bytes,16,opt,name=origin_token_address,json=originTokenAddress,proto3" json:"origin_token_address,omitempty"`
	Nonce              uint64 `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Value              string `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
	GasLimit           uint64 `protobuf:"varint,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasPrice           uint64 `protobuf:"varint,11,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	PinCode            string `protobuf:"bytes,12,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	CheckBalance       bool   `protobuf:"varint,13,opt,name=check_balance,json=checkBalance,proto3" json:"check_balance,omitempty"`
	TargetTokenAddress string `protobuf:"bytes,14,opt,name=target_token_address,json=targetTokenAddress,proto3" json:"target_token_address,omitempty"`
	TargetValue        string `protobuf:"bytes,15,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	DealLine           string `protobuf:"bytes,17,opt,name=deal_line,json=dealLine,proto3" json:"deal_line,omitempty"`
	ChannelId          string `protobuf:"bytes,20,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	IsWait             bool   `protobuf:"varint,18,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
	MaxAmount          bool   `protobuf:"varint,21,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
}

func (x *SwapReq) Reset() {
	*x = SwapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapReq) ProtoMessage() {}

func (x *SwapReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapReq.ProtoReflect.Descriptor instead.
func (*SwapReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{60}
}

func (x *SwapReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *SwapReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SwapReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *SwapReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SwapReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SwapReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *SwapReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *SwapReq) GetOriginTokenAddress() string {
	if x != nil {
		return x.OriginTokenAddress
	}
	return ""
}

func (x *SwapReq) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SwapReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SwapReq) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *SwapReq) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *SwapReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *SwapReq) GetCheckBalance() bool {
	if x != nil {
		return x.CheckBalance
	}
	return false
}

func (x *SwapReq) GetTargetTokenAddress() string {
	if x != nil {
		return x.TargetTokenAddress
	}
	return ""
}

func (x *SwapReq) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *SwapReq) GetDealLine() string {
	if x != nil {
		return x.DealLine
	}
	return ""
}

func (x *SwapReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SwapReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

func (x *SwapReq) GetMaxAmount() bool {
	if x != nil {
		return x.MaxAmount
	}
	return false
}

type GetSwapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNo string `protobuf:"bytes,1,opt,name=record_no,json=recordNo,proto3" json:"record_no,omitempty"`
}

func (x *GetSwapReq) Reset() {
	*x = GetSwapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapReq) ProtoMessage() {}

func (x *GetSwapReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapReq.ProtoReflect.Descriptor instead.
func (*GetSwapReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{61}
}

func (x *GetSwapReq) GetRecordNo() string {
	if x != nil {
		return x.RecordNo
	}
	return ""
}

type GetSwapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *ControllerCommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	Data           *SwapData                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSwapResp) Reset() {
	*x = GetSwapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwapResp) ProtoMessage() {}

func (x *GetSwapResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwapResp.ProtoReflect.Descriptor instead.
func (*GetSwapResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{62}
}

func (x *GetSwapResp) GetCommonResponse() *ControllerCommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *GetSwapResp) GetData() *SwapData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNo string `protobuf:"bytes,1,opt,name=record_no,json=recordNo,proto3" json:"record_no,omitempty"`
	Status   uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	TxHash   string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ErrMsg   string `protobuf:"bytes,20,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (x *SwapData) Reset() {
	*x = SwapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapData) ProtoMessage() {}

func (x *SwapData) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapData.ProtoReflect.Descriptor instead.
func (*SwapData) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{63}
}

func (x *SwapData) GetRecordNo() string {
	if x != nil {
		return x.RecordNo
	}
	return ""
}

func (x *SwapData) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SwapData) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *SwapData) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type SwapCalculateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType          uint32 `protobuf:"varint,1,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	ChainId            uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	FromId             string `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	From               string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	ContractAddress    string `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenType          uint32 `protobuf:"varint,7,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	OriginTokenAddress string `protobuf:"bytes,16,opt,name=origin_token_address,json=originTokenAddress,proto3" json:"origin_token_address,omitempty"`
	Value              string `protobuf:"bytes,17,opt,name=value,proto3" json:"value,omitempty"`
	TargetTokenAddress string `protobuf:"bytes,14,opt,name=target_token_address,json=targetTokenAddress,proto3" json:"target_token_address,omitempty"`
	ChannelId          string `protobuf:"bytes,20,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *SwapCalculateReq) Reset() {
	*x = SwapCalculateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapCalculateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapCalculateReq) ProtoMessage() {}

func (x *SwapCalculateReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapCalculateReq.ProtoReflect.Descriptor instead.
func (*SwapCalculateReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{64}
}

func (x *SwapCalculateReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *SwapCalculateReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SwapCalculateReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *SwapCalculateReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SwapCalculateReq) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *SwapCalculateReq) GetTokenType() uint32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

func (x *SwapCalculateReq) GetOriginTokenAddress() string {
	if x != nil {
		return x.OriginTokenAddress
	}
	return ""
}

func (x *SwapCalculateReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SwapCalculateReq) GetTargetTokenAddress() string {
	if x != nil {
		return x.TargetTokenAddress
	}
	return ""
}

func (x *SwapCalculateReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type SwapCalculateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Rate       string `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
	CurrentOut string `protobuf:"bytes,4,opt,name=currentOut,proto3" json:"currentOut,omitempty"`
}

func (x *SwapCalculateResp) Reset() {
	*x = SwapCalculateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapCalculateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapCalculateResp) ProtoMessage() {}

func (x *SwapCalculateResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapCalculateResp.ProtoReflect.Descriptor instead.
func (*SwapCalculateResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{65}
}

func (x *SwapCalculateResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwapCalculateResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SwapCalculateResp) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *SwapCalculateResp) GetCurrentOut() string {
	if x != nil {
		return x.CurrentOut
	}
	return ""
}

type AllowanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender   string `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	ChainId   uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainType uint32 `protobuf:"varint,4,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	TokenAddr string `protobuf:"bytes,5,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
}

func (x *AllowanceReq) Reset() {
	*x = AllowanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowanceReq) ProtoMessage() {}

func (x *AllowanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowanceReq.ProtoReflect.Descriptor instead.
func (*AllowanceReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{66}
}

func (x *AllowanceReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AllowanceReq) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *AllowanceReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AllowanceReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *AllowanceReq) GetTokenAddr() string {
	if x != nil {
		return x.TokenAddr
	}
	return ""
}

type AllowanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message         string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	AllowanceAmount string `protobuf:"bytes,3,opt,name=allowance_amount,json=allowanceAmount,proto3" json:"allowance_amount,omitempty"`
}

func (x *AllowanceResp) Reset() {
	*x = AllowanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowanceResp) ProtoMessage() {}

func (x *AllowanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowanceResp.ProtoReflect.Descriptor instead.
func (*AllowanceResp) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{67}
}

func (x *AllowanceResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AllowanceResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AllowanceResp) GetAllowanceAmount() string {
	if x != nil {
		return x.AllowanceAmount
	}
	return ""
}

type ApproveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From      string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Spender   string `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	TokenAddr string `protobuf:"bytes,3,opt,name=token_addr,json=tokenAddr,proto3" json:"token_addr,omitempty"`
	PinCode   string `protobuf:"bytes,4,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	FromId    string `protobuf:"bytes,5,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ChainId   uint64 `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainType uint32 `protobuf:"varint,7,opt,name=chain_type,json=chainType,proto3" json:"chain_type,omitempty"`
	Value     string `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	IsWait    bool   `protobuf:"varint,18,opt,name=is_wait,json=isWait,proto3" json:"is_wait,omitempty"`
}

func (x *ApproveReq) Reset() {
	*x = ApproveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_controller_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveReq) ProtoMessage() {}

func (x *ApproveReq) ProtoReflect() protoreflect.Message {
	mi := &file_controller_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveReq.ProtoReflect.Descriptor instead.
func (*ApproveReq) Descriptor() ([]byte, []int) {
	return file_controller_proto_rawDescGZIP(), []int{68}
}

func (x *ApproveReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ApproveReq) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *ApproveReq) GetTokenAddr() string {
	if x != nil {
		return x.TokenAddr
	}
	return ""
}

func (x *ApproveReq) GetPinCode() string {
	if x != nil {
		return x.PinCode
	}
	return ""
}

func (x *ApproveReq) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *ApproveReq) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ApproveReq) GetChainType() uint32 {
	if x != nil {
		return x.ChainType
	}
	return 0
}

func (x *ApproveReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ApproveReq) GetIsWait() bool {
	if x != nil {
		return x.IsWait
	}
	return false
}

var File_controller_proto protoreflect.FileDescriptor

var file_controller_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x9c, 0x03, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x54, 0x47, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x03,
	0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x53, 0x65, 0x6e,
	0x64, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x49,
	0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x09,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x77, 0x6e, 0x65, 0x64, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c,
	0x47, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x61, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x67, 0x61, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x47, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7d, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x47, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x47, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x75, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8e,
	0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x7d, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfe,
	0x02, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22,
	0xd7, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x79, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x78, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3,
	0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x41, 0x74, 0x22, 0x74, 0x0a, 0x03, 0x41, 0x63, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5d,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x02, 0x0a, 0x05, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x75, 0x74, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x7a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x01,
	0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x43, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0xed, 0x02, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x1c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x75,
	0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x55, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x69,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x0a, 0x41, 0x69, 0x72, 0x64, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xaa,
	0x01, 0x0a, 0x0b, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x51, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x22, 0xa3, 0x04, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61,
	0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xc7, 0x01, 0x0a, 0x02, 0x54, 0x78,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0x74, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x78, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x05, 0x0a, 0x08, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x4e,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x80,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8f, 0x03, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x4e, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcc,
	0x02, 0x0a, 0x09, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x6f,
	0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x04, 0x0a, 0x07, 0x53,
	0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x6f, 0x22, 0x7c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x71, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x11, 0x53, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x68, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6,
	0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x32, 0xd3, 0x0f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2c, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x54, 0x78, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4f,
	0x70, 0x65, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x12, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72,
	0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0e, 0x57, 0x61, 0x69, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x39, 0x0a, 0x0c, 0x57, 0x61, 0x69, 0x74, 0x53, 0x77, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x53, 0x77,
	0x61, 0x70, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x06, 0x43, 0x61,
	0x6c, 0x47, 0x61, 0x73, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6c,
	0x47, 0x61, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x6c, 0x47, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x49,
	0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x42, 0x79, 0x54, 0x47, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x42, 0x79, 0x54, 0x47, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x1e, 0x5a,
	0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x2f, 0x3b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_controller_proto_rawDescOnce sync.Once
	file_controller_proto_rawDescData = file_controller_proto_rawDesc
)

func file_controller_proto_rawDescGZIP() []byte {
	file_controller_proto_rawDescOnce.Do(func() {
		file_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_controller_proto_rawDescData)
	})
	return file_controller_proto_rawDescData
}

var file_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_controller_proto_goTypes = []interface{}{
	(*ControllerCommonResponse)(nil), // 0: proto.ControllerCommonResponse
	(*Requester)(nil),                // 1: proto.Requester
	(*LoginByTGReq)(nil),             // 2: proto.LoginByTGReq
	(*QueryContractReq)(nil),         // 3: proto.QueryContractReq
	(*QueryContractDetail)(nil),      // 4: proto.QueryContractDetail
	(*QueryContractResp)(nil),        // 5: proto.QueryContractResp
	(*SendTransactionReq)(nil),       // 6: proto.SendTransactionReq
	(*InitAccessTokenReq)(nil),       // 7: proto.InitAccessTokenReq
	(*InitAccessTokenResp)(nil),      // 8: proto.InitAccessTokenResp
	(*LoginResp)(nil),                // 9: proto.LoginResp
	(*LoginData)(nil),                // 10: proto.LoginData
	(*InitAccessTokenData)(nil),      // 11: proto.InitAccessTokenData
	(*CalGasData)(nil),               // 12: proto.CalGasData
	(*CalGasReq)(nil),                // 13: proto.CalGasReq
	(*CalGasResp)(nil),               // 14: proto.CalGasResp
	(*User)(nil),                     // 15: proto.User
	(*GetUserReq)(nil),               // 16: proto.GetUserReq
	(*BatchGetUserReq)(nil),          // 17: proto.BatchGetUserReq
	(*BatchGetUserResp)(nil),         // 18: proto.BatchGetUserResp
	(*AddUserReq)(nil),               // 19: proto.AddUserReq
	(*UpdateUserReq)(nil),            // 20: proto.UpdateUserReq
	(*DeleteUserReq)(nil),            // 21: proto.DeleteUserReq
	(*GetUserResp)(nil),              // 22: proto.GetUserResp
	(*UserToken)(nil),                // 23: proto.UserToken
	(*Acc)(nil),                      // 24: proto.Acc
	(*AddAccountReq)(nil),            // 25: proto.AddAccountReq
	(*ImportAccountReq)(nil),         // 26: proto.ImportAccountReq
	(*GetAccountReq)(nil),            // 27: proto.GetAccountReq
	(*GetAccountResp)(nil),           // 28: proto.GetAccountResp
	(*Asset)(nil),                    // 29: proto.Asset
	(*GetAssetResp)(nil),             // 30: proto.GetAssetResp
	(*AssetListReq)(nil),             // 31: proto.AssetListReq
	(*AddAssetReq)(nil),              // 32: proto.AddAssetReq
	(*GetTokenInfoRequest)(nil),      // 33: proto.GetTokenInfoRequest
	(*TokenInfoData)(nil),            // 34: proto.TokenInfoData
	(*GetTokenInfoResponse)(nil),     // 35: proto.GetTokenInfoResponse
	(*AssetList)(nil),                // 36: proto.AssetList
	(*AssetListResp)(nil),            // 37: proto.AssetListResp
	(*GetAssetReq)(nil),              // 38: proto.GetAssetReq
	(*GetBankBalanceReq)(nil),        // 39: proto.GetBankBalanceReq
	(*IssueTokenReq)(nil),            // 40: proto.IssueTokenReq
	(*AirdropReq)(nil),               // 41: proto.AirdropReq
	(*AirdropData)(nil),              // 42: proto.AirdropData
	(*GetAirdropResp)(nil),           // 43: proto.GetAirdropResp
	(*GetTxReq)(nil),                 // 44: proto.GetTxReq
	(*TransferReq)(nil),              // 45: proto.TransferReq
	(*Tx)(nil),                       // 46: proto.Tx
	(*GetTxResp)(nil),                // 47: proto.GetTxResp
	(*Envelope)(nil),                 // 48: proto.Envelope
	(*GetEnvelopeResp)(nil),          // 49: proto.GetEnvelopeResp
	(*AddEnvelopeReq)(nil),           // 50: proto.AddEnvelopeReq
	(*OpenEnvelopeReq)(nil),          // 51: proto.OpenEnvelopeReq
	(*GetEnvelopeReq)(nil),           // 52: proto.GetEnvelopeReq
	(*EnvelopeRecord)(nil),           // 53: proto.EnvelopeRecord
	(*GetEnvelopeRecordResp)(nil),    // 54: proto.GetEnvelopeRecordResp
	(*ChangeAccountPinCodeReq)(nil),  // 55: proto.ChangeAccountPinCodeReq
	(*BridgeReq)(nil),                // 56: proto.BridgeReq
	(*GetBridgeReq)(nil),             // 57: proto.GetBridgeReq
	(*BridgeData)(nil),               // 58: proto.BridgeData
	(*GetBridgeResp)(nil),            // 59: proto.GetBridgeResp
	(*SwapReq)(nil),                  // 60: proto.SwapReq
	(*GetSwapReq)(nil),               // 61: proto.GetSwapReq
	(*GetSwapResp)(nil),              // 62: proto.GetSwapResp
	(*SwapData)(nil),                 // 63: proto.SwapData
	(*SwapCalculateReq)(nil),         // 64: proto.SwapCalculateReq
	(*SwapCalculateResp)(nil),        // 65: proto.SwapCalculateResp
	(*AllowanceReq)(nil),             // 66: proto.AllowanceReq
	(*AllowanceResp)(nil),            // 67: proto.AllowanceResp
	(*ApproveReq)(nil),               // 68: proto.ApproveReq
}
var file_controller_proto_depIdxs = []int32{
	0,  // 0: proto.QueryContractResp.common_response:type_name -> proto.ControllerCommonResponse
	4,  // 1: proto.QueryContractResp.data:type_name -> proto.QueryContractDetail
	0,  // 2: proto.InitAccessTokenResp.common_response:type_name -> proto.ControllerCommonResponse
	11, // 3: proto.InitAccessTokenResp.data:type_name -> proto.InitAccessTokenData
	0,  // 4: proto.LoginResp.common_response:type_name -> proto.ControllerCommonResponse
	10, // 5: proto.LoginResp.data:type_name -> proto.LoginData
	0,  // 6: proto.CalGasResp.common_response:type_name -> proto.ControllerCommonResponse
	12, // 7: proto.CalGasResp.data:type_name -> proto.CalGasData
	0,  // 8: proto.BatchGetUserResp.common_response:type_name -> proto.ControllerCommonResponse
	15, // 9: proto.BatchGetUserResp.data:type_name -> proto.User
	0,  // 10: proto.GetUserResp.common_response:type_name -> proto.ControllerCommonResponse
	15, // 11: proto.GetUserResp.data:type_name -> proto.User
	0,  // 12: proto.GetAccountResp.common_response:type_name -> proto.ControllerCommonResponse
	24, // 13: proto.GetAccountResp.data:type_name -> proto.Acc
	0,  // 14: proto.GetAssetResp.common_response:type_name -> proto.ControllerCommonResponse
	29, // 15: proto.GetAssetResp.data:type_name -> proto.Asset
	0,  // 16: proto.GetTokenInfoResponse.common_response:type_name -> proto.ControllerCommonResponse
	34, // 17: proto.GetTokenInfoResponse.data:type_name -> proto.TokenInfoData
	29, // 18: proto.AssetList.list:type_name -> proto.Asset
	0,  // 19: proto.AssetListResp.common_response:type_name -> proto.ControllerCommonResponse
	36, // 20: proto.AssetListResp.data:type_name -> proto.AssetList
	0,  // 21: proto.GetAirdropResp.common_response:type_name -> proto.ControllerCommonResponse
	42, // 22: proto.GetAirdropResp.data:type_name -> proto.AirdropData
	0,  // 23: proto.GetTxResp.common_response:type_name -> proto.ControllerCommonResponse
	46, // 24: proto.GetTxResp.data:type_name -> proto.Tx
	0,  // 25: proto.GetEnvelopeResp.common_response:type_name -> proto.ControllerCommonResponse
	48, // 26: proto.GetEnvelopeResp.data:type_name -> proto.Envelope
	0,  // 27: proto.GetEnvelopeRecordResp.common_response:type_name -> proto.ControllerCommonResponse
	53, // 28: proto.GetEnvelopeRecordResp.data:type_name -> proto.EnvelopeRecord
	0,  // 29: proto.GetBridgeResp.common_response:type_name -> proto.ControllerCommonResponse
	58, // 30: proto.GetBridgeResp.data:type_name -> proto.BridgeData
	0,  // 31: proto.GetSwapResp.common_response:type_name -> proto.ControllerCommonResponse
	63, // 32: proto.GetSwapResp.data:type_name -> proto.SwapData
	16, // 33: proto.ControllerService.GetUser:input_type -> proto.GetUserReq
	19, // 34: proto.ControllerService.AddUser:input_type -> proto.AddUserReq
	20, // 35: proto.ControllerService.UpdateUser:input_type -> proto.UpdateUserReq
	21, // 36: proto.ControllerService.DeleteUser:input_type -> proto.DeleteUserReq
	17, // 37: proto.ControllerService.BatchGetUser:input_type -> proto.BatchGetUserReq
	25, // 38: proto.ControllerService.AddAccount:input_type -> proto.AddAccountReq
	26, // 39: proto.ControllerService.ImportAccount:input_type -> proto.ImportAccountReq
	27, // 40: proto.ControllerService.GetAccount:input_type -> proto.GetAccountReq
	55, // 41: proto.ControllerService.ChangeAccountPinCode:input_type -> proto.ChangeAccountPinCodeReq
	31, // 42: proto.ControllerService.AssetList:input_type -> proto.AssetListReq
	38, // 43: proto.ControllerService.GetAsset:input_type -> proto.GetAssetReq
	40, // 44: proto.ControllerService.IssueToken:input_type -> proto.IssueTokenReq
	32, // 45: proto.ControllerService.AddAsset:input_type -> proto.AddAssetReq
	33, // 46: proto.ControllerService.GetToken:input_type -> proto.GetTokenInfoRequest
	44, // 47: proto.ControllerService.GetTx:input_type -> proto.GetTxReq
	45, // 48: proto.ControllerService.Transfer:input_type -> proto.TransferReq
	6,  // 49: proto.ControllerService.SendTransaction:input_type -> proto.SendTransactionReq
	3,  // 50: proto.ControllerService.QueryContract:input_type -> proto.QueryContractReq
	50, // 51: proto.ControllerService.AddEnvelope:input_type -> proto.AddEnvelopeReq
	51, // 52: proto.ControllerService.OpenEnvelope:input_type -> proto.OpenEnvelopeReq
	52, // 53: proto.ControllerService.GetEnvelope:input_type -> proto.GetEnvelopeReq
	41, // 54: proto.ControllerService.Airdrop:input_type -> proto.AirdropReq
	39, // 55: proto.ControllerService.BankBalance:input_type -> proto.GetBankBalanceReq
	56, // 56: proto.ControllerService.Bridge:input_type -> proto.BridgeReq
	57, // 57: proto.ControllerService.WaitBridgeData:input_type -> proto.GetBridgeReq
	61, // 58: proto.ControllerService.WaitSwapData:input_type -> proto.GetSwapReq
	60, // 59: proto.ControllerService.Swap:input_type -> proto.SwapReq
	64, // 60: proto.ControllerService.SwapCalculate:input_type -> proto.SwapCalculateReq
	66, // 61: proto.ControllerService.Allowance:input_type -> proto.AllowanceReq
	68, // 62: proto.ControllerService.Approve:input_type -> proto.ApproveReq
	13, // 63: proto.ControllerService.CalGas:input_type -> proto.CalGasReq
	7,  // 64: proto.ControllerService.InitAccessToken:input_type -> proto.InitAccessTokenReq
	2,  // 65: proto.ControllerService.LoginByTG:input_type -> proto.LoginByTGReq
	22, // 66: proto.ControllerService.GetUser:output_type -> proto.GetUserResp
	22, // 67: proto.ControllerService.AddUser:output_type -> proto.GetUserResp
	22, // 68: proto.ControllerService.UpdateUser:output_type -> proto.GetUserResp
	22, // 69: proto.ControllerService.DeleteUser:output_type -> proto.GetUserResp
	18, // 70: proto.ControllerService.BatchGetUser:output_type -> proto.BatchGetUserResp
	28, // 71: proto.ControllerService.AddAccount:output_type -> proto.GetAccountResp
	28, // 72: proto.ControllerService.ImportAccount:output_type -> proto.GetAccountResp
	28, // 73: proto.ControllerService.GetAccount:output_type -> proto.GetAccountResp
	28, // 74: proto.ControllerService.ChangeAccountPinCode:output_type -> proto.GetAccountResp
	37, // 75: proto.ControllerService.AssetList:output_type -> proto.AssetListResp
	30, // 76: proto.ControllerService.GetAsset:output_type -> proto.GetAssetResp
	47, // 77: proto.ControllerService.IssueToken:output_type -> proto.GetTxResp
	30, // 78: proto.ControllerService.AddAsset:output_type -> proto.GetAssetResp
	35, // 79: proto.ControllerService.GetToken:output_type -> proto.GetTokenInfoResponse
	47, // 80: proto.ControllerService.GetTx:output_type -> proto.GetTxResp
	47, // 81: proto.ControllerService.Transfer:output_type -> proto.GetTxResp
	47, // 82: proto.ControllerService.SendTransaction:output_type -> proto.GetTxResp
	5,  // 83: proto.ControllerService.QueryContract:output_type -> proto.QueryContractResp
	49, // 84: proto.ControllerService.AddEnvelope:output_type -> proto.GetEnvelopeResp
	54, // 85: proto.ControllerService.OpenEnvelope:output_type -> proto.GetEnvelopeRecordResp
	49, // 86: proto.ControllerService.GetEnvelope:output_type -> proto.GetEnvelopeResp
	43, // 87: proto.ControllerService.Airdrop:output_type -> proto.GetAirdropResp
	30, // 88: proto.ControllerService.BankBalance:output_type -> proto.GetAssetResp
	59, // 89: proto.ControllerService.Bridge:output_type -> proto.GetBridgeResp
	59, // 90: proto.ControllerService.WaitBridgeData:output_type -> proto.GetBridgeResp
	62, // 91: proto.ControllerService.WaitSwapData:output_type -> proto.GetSwapResp
	62, // 92: proto.ControllerService.Swap:output_type -> proto.GetSwapResp
	65, // 93: proto.ControllerService.SwapCalculate:output_type -> proto.SwapCalculateResp
	67, // 94: proto.ControllerService.Allowance:output_type -> proto.AllowanceResp
	47, // 95: proto.ControllerService.Approve:output_type -> proto.GetTxResp
	14, // 96: proto.ControllerService.CalGas:output_type -> proto.CalGasResp
	8,  // 97: proto.ControllerService.InitAccessToken:output_type -> proto.InitAccessTokenResp
	9,  // 98: proto.ControllerService.LoginByTG:output_type -> proto.LoginResp
	66, // [66:99] is the sub-list for method output_type
	33, // [33:66] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_controller_proto_init() }
func file_controller_proto_init() {
	if File_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerCommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Requester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginByTGReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitAccessTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitAccessTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitAccessTokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalGasData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalGasReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalGasResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirdropReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirdropData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAirdropResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnvelopeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEnvelopeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenEnvelopeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnvelopeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnvelopeRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAccountPinCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapCalculateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapCalculateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_controller_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_controller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_controller_proto_goTypes,
		DependencyIndexes: file_controller_proto_depIdxs,
		MessageInfos:      file_controller_proto_msgTypes,
	}.Build()
	File_controller_proto = out.File
	file_controller_proto_rawDesc = nil
	file_controller_proto_goTypes = nil
	file_controller_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	BatchGetUser(ctx context.Context, in *BatchGetUserReq, opts ...grpc.CallOption) (*BatchGetUserResp, error)
	AddAccount(ctx context.Context, in *AddAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	ImportAccount(ctx context.Context, in *ImportAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	ChangeAccountPinCode(ctx context.Context, in *ChangeAccountPinCodeReq, opts ...grpc.CallOption) (*GetAccountResp, error)
	AssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListResp, error)
	GetAsset(ctx context.Context, in *GetAssetReq, opts ...grpc.CallOption) (*GetAssetResp, error)
	IssueToken(ctx context.Context, in *IssueTokenReq, opts ...grpc.CallOption) (*GetTxResp, error)
	AddAsset(ctx context.Context, in *AddAssetReq, opts ...grpc.CallOption) (*GetAssetResp, error)
	GetToken(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error)
	GetTx(ctx context.Context, in *GetTxReq, opts ...grpc.CallOption) (*GetTxResp, error)
	Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*GetTxResp, error)
	SendTransaction(ctx context.Context, in *SendTransactionReq, opts ...grpc.CallOption) (*GetTxResp, error)
	QueryContract(ctx context.Context, in *QueryContractReq, opts ...grpc.CallOption) (*QueryContractResp, error)
	AddEnvelope(ctx context.Context, in *AddEnvelopeReq, opts ...grpc.CallOption) (*GetEnvelopeResp, error)
	OpenEnvelope(ctx context.Context, in *OpenEnvelopeReq, opts ...grpc.CallOption) (*GetEnvelopeRecordResp, error)
	GetEnvelope(ctx context.Context, in *GetEnvelopeReq, opts ...grpc.CallOption) (*GetEnvelopeResp, error)
	Airdrop(ctx context.Context, in *AirdropReq, opts ...grpc.CallOption) (*GetAirdropResp, error)
	BankBalance(ctx context.Context, in *GetBankBalanceReq, opts ...grpc.CallOption) (*GetAssetResp, error)
	Bridge(ctx context.Context, in *BridgeReq, opts ...grpc.CallOption) (*GetBridgeResp, error)
	WaitBridgeData(ctx context.Context, in *GetBridgeReq, opts ...grpc.CallOption) (ControllerService_WaitBridgeDataClient, error)
	WaitSwapData(ctx context.Context, in *GetSwapReq, opts ...grpc.CallOption) (ControllerService_WaitSwapDataClient, error)
	Swap(ctx context.Context, in *SwapReq, opts ...grpc.CallOption) (*GetSwapResp, error)
	SwapCalculate(ctx context.Context, in *SwapCalculateReq, opts ...grpc.CallOption) (*SwapCalculateResp, error)
	Allowance(ctx context.Context, in *AllowanceReq, opts ...grpc.CallOption) (*AllowanceResp, error)
	Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*GetTxResp, error)
	CalGas(ctx context.Context, in *CalGasReq, opts ...grpc.CallOption) (*CalGasResp, error)
	InitAccessToken(ctx context.Context, in *InitAccessTokenReq, opts ...grpc.CallOption) (*InitAccessTokenResp, error)
	LoginByTG(ctx context.Context, in *LoginByTGReq, opts ...grpc.CallOption) (*LoginResp, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) BatchGetUser(ctx context.Context, in *BatchGetUserReq, opts ...grpc.CallOption) (*BatchGetUserResp, error) {
	out := new(BatchGetUserResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/BatchGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AddAccount(ctx context.Context, in *AddAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ImportAccount(ctx context.Context, in *ImportAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/ImportAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ChangeAccountPinCode(ctx context.Context, in *ChangeAccountPinCodeReq, opts ...grpc.CallOption) (*GetAccountResp, error) {
	out := new(GetAccountResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/ChangeAccountPinCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AssetList(ctx context.Context, in *AssetListReq, opts ...grpc.CallOption) (*AssetListResp, error) {
	out := new(AssetListResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/AssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetAsset(ctx context.Context, in *GetAssetReq, opts ...grpc.CallOption) (*GetAssetResp, error) {
	out := new(GetAssetResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) IssueToken(ctx context.Context, in *IssueTokenReq, opts ...grpc.CallOption) (*GetTxResp, error) {
	out := new(GetTxResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/IssueToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AddAsset(ctx context.Context, in *AddAssetReq, opts ...grpc.CallOption) (*GetAssetResp, error) {
	out := new(GetAssetResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/AddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetToken(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error) {
	out := new(GetTokenInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetTx(ctx context.Context, in *GetTxReq, opts ...grpc.CallOption) (*GetTxResp, error) {
	out := new(GetTxResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/GetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) Transfer(ctx context.Context, in *TransferReq, opts ...grpc.CallOption) (*GetTxResp, error) {
	out := new(GetTxResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) SendTransaction(ctx context.Context, in *SendTransactionReq, opts ...grpc.CallOption) (*GetTxResp, error) {
	out := new(GetTxResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) QueryContract(ctx context.Context, in *QueryContractReq, opts ...grpc.CallOption) (*QueryContractResp, error) {
	out := new(QueryContractResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/QueryContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) AddEnvelope(ctx context.Context, in *AddEnvelopeReq, opts ...grpc.CallOption) (*GetEnvelopeResp, error) {
	out := new(GetEnvelopeResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/AddEnvelope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) OpenEnvelope(ctx context.Context, in *OpenEnvelopeReq, opts ...grpc.CallOption) (*GetEnvelopeRecordResp, error) {
	out := new(GetEnvelopeRecordResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/OpenEnvelope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetEnvelope(ctx context.Context, in *GetEnvelopeReq, opts ...grpc.CallOption) (*GetEnvelopeResp, error) {
	out := new(GetEnvelopeResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/GetEnvelope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) Airdrop(ctx context.Context, in *AirdropReq, opts ...grpc.CallOption) (*GetAirdropResp, error) {
	out := new(GetAirdropResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/Airdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) BankBalance(ctx context.Context, in *GetBankBalanceReq, opts ...grpc.CallOption) (*GetAssetResp, error) {
	out := new(GetAssetResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/BankBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) Bridge(ctx context.Context, in *BridgeReq, opts ...grpc.CallOption) (*GetBridgeResp, error) {
	out := new(GetBridgeResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/Bridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) WaitBridgeData(ctx context.Context, in *GetBridgeReq, opts ...grpc.CallOption) (ControllerService_WaitBridgeDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerService_serviceDesc.Streams[0], "/proto.ControllerService/WaitBridgeData", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceWaitBridgeDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_WaitBridgeDataClient interface {
	Recv() (*GetBridgeResp, error)
	grpc.ClientStream
}

type controllerServiceWaitBridgeDataClient struct {
	grpc.ClientStream
}

func (x *controllerServiceWaitBridgeDataClient) Recv() (*GetBridgeResp, error) {
	m := new(GetBridgeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerServiceClient) WaitSwapData(ctx context.Context, in *GetSwapReq, opts ...grpc.CallOption) (ControllerService_WaitSwapDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerService_serviceDesc.Streams[1], "/proto.ControllerService/WaitSwapData", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceWaitSwapDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_WaitSwapDataClient interface {
	Recv() (*GetSwapResp, error)
	grpc.ClientStream
}

type controllerServiceWaitSwapDataClient struct {
	grpc.ClientStream
}

func (x *controllerServiceWaitSwapDataClient) Recv() (*GetSwapResp, error) {
	m := new(GetSwapResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerServiceClient) Swap(ctx context.Context, in *SwapReq, opts ...grpc.CallOption) (*GetSwapResp, error) {
	out := new(GetSwapResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/Swap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) SwapCalculate(ctx context.Context, in *SwapCalculateReq, opts ...grpc.CallOption) (*SwapCalculateResp, error) {
	out := new(SwapCalculateResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/SwapCalculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) Allowance(ctx context.Context, in *AllowanceReq, opts ...grpc.CallOption) (*AllowanceResp, error) {
	out := new(AllowanceResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/Allowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) Approve(ctx context.Context, in *ApproveReq, opts ...grpc.CallOption) (*GetTxResp, error) {
	out := new(GetTxResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) CalGas(ctx context.Context, in *CalGasReq, opts ...grpc.CallOption) (*CalGasResp, error) {
	out := new(CalGasResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/CalGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) InitAccessToken(ctx context.Context, in *InitAccessTokenReq, opts ...grpc.CallOption) (*InitAccessTokenResp, error) {
	out := new(InitAccessTokenResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/InitAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) LoginByTG(ctx context.Context, in *LoginByTGReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/proto.ControllerService/LoginByTG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	AddUser(context.Context, *AddUserReq) (*GetUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*GetUserResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*GetUserResp, error)
	BatchGetUser(context.Context, *BatchGetUserReq) (*BatchGetUserResp, error)
	AddAccount(context.Context, *AddAccountReq) (*GetAccountResp, error)
	ImportAccount(context.Context, *ImportAccountReq) (*GetAccountResp, error)
	GetAccount(context.Context, *GetAccountReq) (*GetAccountResp, error)
	ChangeAccountPinCode(context.Context, *ChangeAccountPinCodeReq) (*GetAccountResp, error)
	AssetList(context.Context, *AssetListReq) (*AssetListResp, error)
	GetAsset(context.Context, *GetAssetReq) (*GetAssetResp, error)
	IssueToken(context.Context, *IssueTokenReq) (*GetTxResp, error)
	AddAsset(context.Context, *AddAssetReq) (*GetAssetResp, error)
	GetToken(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error)
	GetTx(context.Context, *GetTxReq) (*GetTxResp, error)
	Transfer(context.Context, *TransferReq) (*GetTxResp, error)
	SendTransaction(context.Context, *SendTransactionReq) (*GetTxResp, error)
	QueryContract(context.Context, *QueryContractReq) (*QueryContractResp, error)
	AddEnvelope(context.Context, *AddEnvelopeReq) (*GetEnvelopeResp, error)
	OpenEnvelope(context.Context, *OpenEnvelopeReq) (*GetEnvelopeRecordResp, error)
	GetEnvelope(context.Context, *GetEnvelopeReq) (*GetEnvelopeResp, error)
	Airdrop(context.Context, *AirdropReq) (*GetAirdropResp, error)
	BankBalance(context.Context, *GetBankBalanceReq) (*GetAssetResp, error)
	Bridge(context.Context, *BridgeReq) (*GetBridgeResp, error)
	WaitBridgeData(*GetBridgeReq, ControllerService_WaitBridgeDataServer) error
	WaitSwapData(*GetSwapReq, ControllerService_WaitSwapDataServer) error
	Swap(context.Context, *SwapReq) (*GetSwapResp, error)
	SwapCalculate(context.Context, *SwapCalculateReq) (*SwapCalculateResp, error)
	Allowance(context.Context, *AllowanceReq) (*AllowanceResp, error)
	Approve(context.Context, *ApproveReq) (*GetTxResp, error)
	CalGas(context.Context, *CalGasReq) (*CalGasResp, error)
	InitAccessToken(context.Context, *InitAccessTokenReq) (*InitAccessTokenResp, error)
	LoginByTG(context.Context, *LoginByTGReq) (*LoginResp, error)
}

// UnimplementedControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (*UnimplementedControllerServiceServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedControllerServiceServer) AddUser(context.Context, *AddUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedControllerServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedControllerServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedControllerServiceServer) BatchGetUser(context.Context, *BatchGetUserReq) (*BatchGetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUser not implemented")
}
func (*UnimplementedControllerServiceServer) AddAccount(context.Context, *AddAccountReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (*UnimplementedControllerServiceServer) ImportAccount(context.Context, *ImportAccountReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAccount not implemented")
}
func (*UnimplementedControllerServiceServer) GetAccount(context.Context, *GetAccountReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedControllerServiceServer) ChangeAccountPinCode(context.Context, *ChangeAccountPinCodeReq) (*GetAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountPinCode not implemented")
}
func (*UnimplementedControllerServiceServer) AssetList(context.Context, *AssetListReq) (*AssetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetList not implemented")
}
func (*UnimplementedControllerServiceServer) GetAsset(context.Context, *GetAssetReq) (*GetAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (*UnimplementedControllerServiceServer) IssueToken(context.Context, *IssueTokenReq) (*GetTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueToken not implemented")
}
func (*UnimplementedControllerServiceServer) AddAsset(context.Context, *AddAssetReq) (*GetAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (*UnimplementedControllerServiceServer) GetToken(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedControllerServiceServer) GetTx(context.Context, *GetTxReq) (*GetTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (*UnimplementedControllerServiceServer) Transfer(context.Context, *TransferReq) (*GetTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedControllerServiceServer) SendTransaction(context.Context, *SendTransactionReq) (*GetTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedControllerServiceServer) QueryContract(context.Context, *QueryContractReq) (*QueryContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryContract not implemented")
}
func (*UnimplementedControllerServiceServer) AddEnvelope(context.Context, *AddEnvelopeReq) (*GetEnvelopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEnvelope not implemented")
}
func (*UnimplementedControllerServiceServer) OpenEnvelope(context.Context, *OpenEnvelopeReq) (*GetEnvelopeRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenEnvelope not implemented")
}
func (*UnimplementedControllerServiceServer) GetEnvelope(context.Context, *GetEnvelopeReq) (*GetEnvelopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvelope not implemented")
}
func (*UnimplementedControllerServiceServer) Airdrop(context.Context, *AirdropReq) (*GetAirdropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Airdrop not implemented")
}
func (*UnimplementedControllerServiceServer) BankBalance(context.Context, *GetBankBalanceReq) (*GetAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankBalance not implemented")
}
func (*UnimplementedControllerServiceServer) Bridge(context.Context, *BridgeReq) (*GetBridgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bridge not implemented")
}
func (*UnimplementedControllerServiceServer) WaitBridgeData(*GetBridgeReq, ControllerService_WaitBridgeDataServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitBridgeData not implemented")
}
func (*UnimplementedControllerServiceServer) WaitSwapData(*GetSwapReq, ControllerService_WaitSwapDataServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitSwapData not implemented")
}
func (*UnimplementedControllerServiceServer) Swap(context.Context, *SwapReq) (*GetSwapResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Swap not implemented")
}
func (*UnimplementedControllerServiceServer) SwapCalculate(context.Context, *SwapCalculateReq) (*SwapCalculateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapCalculate not implemented")
}
func (*UnimplementedControllerServiceServer) Allowance(context.Context, *AllowanceReq) (*AllowanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allowance not implemented")
}
func (*UnimplementedControllerServiceServer) Approve(context.Context, *ApproveReq) (*GetTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (*UnimplementedControllerServiceServer) CalGas(context.Context, *CalGasReq) (*CalGasResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalGas not implemented")
}
func (*UnimplementedControllerServiceServer) InitAccessToken(context.Context, *InitAccessTokenReq) (*InitAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitAccessToken not implemented")
}
func (*UnimplementedControllerServiceServer) LoginByTG(context.Context, *LoginByTGReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByTG not implemented")
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_BatchGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).BatchGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/BatchGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).BatchGetUser(ctx, req.(*BatchGetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AddAccount(ctx, req.(*AddAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ImportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ImportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/ImportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ImportAccount(ctx, req.(*ImportAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetAccount(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ChangeAccountPinCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccountPinCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ChangeAccountPinCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/ChangeAccountPinCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ChangeAccountPinCode(ctx, req.(*ChangeAccountPinCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/AssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AssetList(ctx, req.(*AssetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetAsset(ctx, req.(*GetAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).IssueToken(ctx, req.(*IssueTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/AddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AddAsset(ctx, req.(*AddAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetToken(ctx, req.(*GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/GetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetTx(ctx, req.(*GetTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Transfer(ctx, req.(*TransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).SendTransaction(ctx, req.(*SendTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_QueryContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).QueryContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/QueryContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).QueryContract(ctx, req.(*QueryContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_AddEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnvelopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).AddEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/AddEnvelope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).AddEnvelope(ctx, req.(*AddEnvelopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_OpenEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenEnvelopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).OpenEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/OpenEnvelope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).OpenEnvelope(ctx, req.(*OpenEnvelopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvelopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/GetEnvelope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetEnvelope(ctx, req.(*GetEnvelopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_Airdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Airdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/Airdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Airdrop(ctx, req.(*AirdropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_BankBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).BankBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/BankBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).BankBalance(ctx, req.(*GetBankBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_Bridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Bridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/Bridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Bridge(ctx, req.(*BridgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_WaitBridgeData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBridgeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).WaitBridgeData(m, &controllerServiceWaitBridgeDataServer{stream})
}

type ControllerService_WaitBridgeDataServer interface {
	Send(*GetBridgeResp) error
	grpc.ServerStream
}

type controllerServiceWaitBridgeDataServer struct {
	grpc.ServerStream
}

func (x *controllerServiceWaitBridgeDataServer) Send(m *GetBridgeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerService_WaitSwapData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSwapReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).WaitSwapData(m, &controllerServiceWaitSwapDataServer{stream})
}

type ControllerService_WaitSwapDataServer interface {
	Send(*GetSwapResp) error
	grpc.ServerStream
}

type controllerServiceWaitSwapDataServer struct {
	grpc.ServerStream
}

func (x *controllerServiceWaitSwapDataServer) Send(m *GetSwapResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerService_Swap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Swap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/Swap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Swap(ctx, req.(*SwapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_SwapCalculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapCalculateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).SwapCalculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/SwapCalculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).SwapCalculate(ctx, req.(*SwapCalculateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_Allowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Allowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/Allowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Allowance(ctx, req.(*AllowanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Approve(ctx, req.(*ApproveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_CalGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalGasReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CalGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/CalGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CalGas(ctx, req.(*CalGasReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_InitAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).InitAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/InitAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).InitAccessToken(ctx, req.(*InitAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_LoginByTG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByTGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).LoginByTG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ControllerService/LoginByTG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).LoginByTG(ctx, req.(*LoginByTGReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _ControllerService_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _ControllerService_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ControllerService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ControllerService_DeleteUser_Handler,
		},
		{
			MethodName: "BatchGetUser",
			Handler:    _ControllerService_BatchGetUser_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _ControllerService_AddAccount_Handler,
		},
		{
			MethodName: "ImportAccount",
			Handler:    _ControllerService_ImportAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ControllerService_GetAccount_Handler,
		},
		{
			MethodName: "ChangeAccountPinCode",
			Handler:    _ControllerService_ChangeAccountPinCode_Handler,
		},
		{
			MethodName: "AssetList",
			Handler:    _ControllerService_AssetList_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _ControllerService_GetAsset_Handler,
		},
		{
			MethodName: "IssueToken",
			Handler:    _ControllerService_IssueToken_Handler,
		},
		{
			MethodName: "AddAsset",
			Handler:    _ControllerService_AddAsset_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _ControllerService_GetToken_Handler,
		},
		{
			MethodName: "GetTx",
			Handler:    _ControllerService_GetTx_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _ControllerService_Transfer_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _ControllerService_SendTransaction_Handler,
		},
		{
			MethodName: "QueryContract",
			Handler:    _ControllerService_QueryContract_Handler,
		},
		{
			MethodName: "AddEnvelope",
			Handler:    _ControllerService_AddEnvelope_Handler,
		},
		{
			MethodName: "OpenEnvelope",
			Handler:    _ControllerService_OpenEnvelope_Handler,
		},
		{
			MethodName: "GetEnvelope",
			Handler:    _ControllerService_GetEnvelope_Handler,
		},
		{
			MethodName: "Airdrop",
			Handler:    _ControllerService_Airdrop_Handler,
		},
		{
			MethodName: "BankBalance",
			Handler:    _ControllerService_BankBalance_Handler,
		},
		{
			MethodName: "Bridge",
			Handler:    _ControllerService_Bridge_Handler,
		},
		{
			MethodName: "Swap",
			Handler:    _ControllerService_Swap_Handler,
		},
		{
			MethodName: "SwapCalculate",
			Handler:    _ControllerService_SwapCalculate_Handler,
		},
		{
			MethodName: "Allowance",
			Handler:    _ControllerService_Allowance_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _ControllerService_Approve_Handler,
		},
		{
			MethodName: "CalGas",
			Handler:    _ControllerService_CalGas_Handler,
		},
		{
			MethodName: "InitAccessToken",
			Handler:    _ControllerService_InitAccessToken_Handler,
		},
		{
			MethodName: "LoginByTG",
			Handler:    _ControllerService_LoginByTG_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitBridgeData",
			Handler:       _ControllerService_WaitBridgeData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WaitSwapData",
			Handler:       _ControllerService_WaitSwapData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}
